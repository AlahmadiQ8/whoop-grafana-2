/*
 * WHOOP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Whoop.Sdk.Client.OpenAPIDateConverter;

namespace Whoop.Sdk.Model
{
    /// <summary>
    /// WHOOP&#39;s measurements and evaluation of the sleep activity. Only present if the Sleep State is &#x60;SCORED&#x60;
    /// </summary>
    [DataContract(Name = "SleepScore")]
    public partial class SleepScore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SleepScore" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SleepScore() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SleepScore" /> class.
        /// </summary>
        /// <param name="stageSummary">stageSummary (required).</param>
        /// <param name="sleepNeeded">sleepNeeded (required).</param>
        /// <param name="respiratoryRate">The user&#39;s respiratory rate during the sleep..</param>
        /// <param name="sleepPerformancePercentage">A percentage (0-100%) of the time a user is asleep over the amount of sleep the user needed. May not be reported if WHOOP does not have enough data about a user yet to calculate Sleep Need..</param>
        /// <param name="sleepConsistencyPercentage">Percentage (0-100%) of how similar this sleep and wake times compared to the previous day. May not be reported if WHOOP does not have enough sleep data about a user yet to understand consistency..</param>
        /// <param name="sleepEfficiencyPercentage">A percentage (0-100%) of the time you spend in bed that you are actually asleep..</param>
        public SleepScore(SleepStageSummary stageSummary = default(SleepStageSummary), SleepNeeded sleepNeeded = default(SleepNeeded), float respiratoryRate = default(float), float sleepPerformancePercentage = default(float), float sleepConsistencyPercentage = default(float), float sleepEfficiencyPercentage = default(float))
        {
            // to ensure "stageSummary" is required (not null)
            if (stageSummary == null)
            {
                throw new ArgumentNullException("stageSummary is a required property for SleepScore and cannot be null");
            }
            this.StageSummary = stageSummary;
            // to ensure "sleepNeeded" is required (not null)
            if (sleepNeeded == null)
            {
                throw new ArgumentNullException("sleepNeeded is a required property for SleepScore and cannot be null");
            }
            this.SleepNeeded = sleepNeeded;
            this.RespiratoryRate = respiratoryRate;
            this.SleepPerformancePercentage = sleepPerformancePercentage;
            this.SleepConsistencyPercentage = sleepConsistencyPercentage;
            this.SleepEfficiencyPercentage = sleepEfficiencyPercentage;
        }

        /// <summary>
        /// Gets or Sets StageSummary
        /// </summary>
        [DataMember(Name = "stage_summary", IsRequired = true, EmitDefaultValue = true)]
        public SleepStageSummary StageSummary { get; set; }

        /// <summary>
        /// Gets or Sets SleepNeeded
        /// </summary>
        [DataMember(Name = "sleep_needed", IsRequired = true, EmitDefaultValue = true)]
        public SleepNeeded SleepNeeded { get; set; }

        /// <summary>
        /// The user&#39;s respiratory rate during the sleep.
        /// </summary>
        /// <value>The user&#39;s respiratory rate during the sleep.</value>
        /// <example>16.11328125</example>
        [DataMember(Name = "respiratory_rate", EmitDefaultValue = false)]
        public float RespiratoryRate { get; set; }

        /// <summary>
        /// A percentage (0-100%) of the time a user is asleep over the amount of sleep the user needed. May not be reported if WHOOP does not have enough data about a user yet to calculate Sleep Need.
        /// </summary>
        /// <value>A percentage (0-100%) of the time a user is asleep over the amount of sleep the user needed. May not be reported if WHOOP does not have enough data about a user yet to calculate Sleep Need.</value>
        /// <example>98</example>
        [DataMember(Name = "sleep_performance_percentage", EmitDefaultValue = false)]
        public float SleepPerformancePercentage { get; set; }

        /// <summary>
        /// Percentage (0-100%) of how similar this sleep and wake times compared to the previous day. May not be reported if WHOOP does not have enough sleep data about a user yet to understand consistency.
        /// </summary>
        /// <value>Percentage (0-100%) of how similar this sleep and wake times compared to the previous day. May not be reported if WHOOP does not have enough sleep data about a user yet to understand consistency.</value>
        /// <example>90</example>
        [DataMember(Name = "sleep_consistency_percentage", EmitDefaultValue = false)]
        public float SleepConsistencyPercentage { get; set; }

        /// <summary>
        /// A percentage (0-100%) of the time you spend in bed that you are actually asleep.
        /// </summary>
        /// <value>A percentage (0-100%) of the time you spend in bed that you are actually asleep.</value>
        /// <example>91.69533848</example>
        [DataMember(Name = "sleep_efficiency_percentage", EmitDefaultValue = false)]
        public float SleepEfficiencyPercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SleepScore {\n");
            sb.Append("  StageSummary: ").Append(StageSummary).Append("\n");
            sb.Append("  SleepNeeded: ").Append(SleepNeeded).Append("\n");
            sb.Append("  RespiratoryRate: ").Append(RespiratoryRate).Append("\n");
            sb.Append("  SleepPerformancePercentage: ").Append(SleepPerformancePercentage).Append("\n");
            sb.Append("  SleepConsistencyPercentage: ").Append(SleepConsistencyPercentage).Append("\n");
            sb.Append("  SleepEfficiencyPercentage: ").Append(SleepEfficiencyPercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
