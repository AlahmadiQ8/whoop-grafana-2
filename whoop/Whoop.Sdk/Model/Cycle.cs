/*
 * WHOOP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Whoop.Sdk.Client.OpenAPIDateConverter;

namespace Whoop.Sdk.Model
{
    /// <summary>
    /// The collection of records in this page.
    /// </summary>
    [DataContract(Name = "Cycle")]
    public partial class Cycle : IValidatableObject
    {
        /// <summary>
        /// &#x60;SCORED&#x60; means the cycle was scored and the measurement values will be present. &#x60;PENDING_SCORE&#x60; means WHOOP is currently evaluating the cycle. &#x60;UNSCORABLE&#x60; means this activity could not be scored for some reason - commonly because there is not enough user metric data for the time range.
        /// </summary>
        /// <value>&#x60;SCORED&#x60; means the cycle was scored and the measurement values will be present. &#x60;PENDING_SCORE&#x60; means WHOOP is currently evaluating the cycle. &#x60;UNSCORABLE&#x60; means this activity could not be scored for some reason - commonly because there is not enough user metric data for the time range.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScoreStateEnum
        {
            /// <summary>
            /// Enum SCORED for value: SCORED
            /// </summary>
            [EnumMember(Value = "SCORED")]
            SCORED = 1,

            /// <summary>
            /// Enum PENDINGSCORE for value: PENDING_SCORE
            /// </summary>
            [EnumMember(Value = "PENDING_SCORE")]
            PENDINGSCORE = 2,

            /// <summary>
            /// Enum UNSCORABLE for value: UNSCORABLE
            /// </summary>
            [EnumMember(Value = "UNSCORABLE")]
            UNSCORABLE = 3
        }


        /// <summary>
        /// &#x60;SCORED&#x60; means the cycle was scored and the measurement values will be present. &#x60;PENDING_SCORE&#x60; means WHOOP is currently evaluating the cycle. &#x60;UNSCORABLE&#x60; means this activity could not be scored for some reason - commonly because there is not enough user metric data for the time range.
        /// </summary>
        /// <value>&#x60;SCORED&#x60; means the cycle was scored and the measurement values will be present. &#x60;PENDING_SCORE&#x60; means WHOOP is currently evaluating the cycle. &#x60;UNSCORABLE&#x60; means this activity could not be scored for some reason - commonly because there is not enough user metric data for the time range.</value>
        /// <example>SCORED</example>
        [DataMember(Name = "score_state", IsRequired = true, EmitDefaultValue = true)]
        public ScoreStateEnum ScoreState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cycle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Cycle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cycle" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the physiological cycle (required).</param>
        /// <param name="userId">The WHOOP User for the physiological cycle (required).</param>
        /// <param name="createdAt">The time the cycle was recorded in WHOOP (required).</param>
        /// <param name="updatedAt">The time the cycle was last updated in WHOOP (required).</param>
        /// <param name="start">Start time bound of the cycle (required).</param>
        /// <param name="end">End time bound of the cycle. If not present, the user is currently in this cycle.</param>
        /// <param name="timezoneOffset">The user&#39;s timezone offset at the time the cycle was recorded. Follows format for Time Zone Designator (TZD) - &#39;+hh:mm&#39;, &#39;-hh:mm&#39;, or &#39;Z&#39;. (required).</param>
        /// <param name="scoreState">&#x60;SCORED&#x60; means the cycle was scored and the measurement values will be present. &#x60;PENDING_SCORE&#x60; means WHOOP is currently evaluating the cycle. &#x60;UNSCORABLE&#x60; means this activity could not be scored for some reason - commonly because there is not enough user metric data for the time range. (required).</param>
        /// <param name="score">score.</param>
        public Cycle(long id = default(long), long userId = default(long), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), DateTime start = default(DateTime), DateTime? end = default(DateTime?), string timezoneOffset = default(string), ScoreStateEnum scoreState = default(ScoreStateEnum), CycleScore score = default(CycleScore))
        {
            this.Id = id;
            this.UserId = userId;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Start = start;
            // to ensure "timezoneOffset" is required (not null)
            if (timezoneOffset == null)
            {
                throw new ArgumentNullException("timezoneOffset is a required property for Cycle and cannot be null");
            }
            this.TimezoneOffset = timezoneOffset;
            this.ScoreState = scoreState;
            this.End = end;
            this.Score = score;
        }

        /// <summary>
        /// Unique identifier for the physiological cycle
        /// </summary>
        /// <value>Unique identifier for the physiological cycle</value>
        /// <example>93845</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// The WHOOP User for the physiological cycle
        /// </summary>
        /// <value>The WHOOP User for the physiological cycle</value>
        /// <example>10129</example>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = true)]
        public long UserId { get; set; }

        /// <summary>
        /// The time the cycle was recorded in WHOOP
        /// </summary>
        /// <value>The time the cycle was recorded in WHOOP</value>
        /// <example>2022-04-24T11:25:44.774Z</example>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The time the cycle was last updated in WHOOP
        /// </summary>
        /// <value>The time the cycle was last updated in WHOOP</value>
        /// <example>2022-04-24T14:25:44.774Z</example>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Start time bound of the cycle
        /// </summary>
        /// <value>Start time bound of the cycle</value>
        /// <example>2022-04-24T02:25:44.774Z</example>
        [DataMember(Name = "start", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Start { get; set; }

        /// <summary>
        /// End time bound of the cycle. If not present, the user is currently in this cycle
        /// </summary>
        /// <value>End time bound of the cycle. If not present, the user is currently in this cycle</value>
        /// <example>2022-04-24T10:25:44.774Z</example>
        [DataMember(Name = "end", EmitDefaultValue = true)]
        public DateTime? End { get; set; }

        /// <summary>
        /// The user&#39;s timezone offset at the time the cycle was recorded. Follows format for Time Zone Designator (TZD) - &#39;+hh:mm&#39;, &#39;-hh:mm&#39;, or &#39;Z&#39;.
        /// </summary>
        /// <value>The user&#39;s timezone offset at the time the cycle was recorded. Follows format for Time Zone Designator (TZD) - &#39;+hh:mm&#39;, &#39;-hh:mm&#39;, or &#39;Z&#39;.</value>
        /// <example>-05:00</example>
        [DataMember(Name = "timezone_offset", IsRequired = true, EmitDefaultValue = true)]
        public string TimezoneOffset { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public CycleScore Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Cycle {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  TimezoneOffset: ").Append(TimezoneOffset).Append("\n");
            sb.Append("  ScoreState: ").Append(ScoreState).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
