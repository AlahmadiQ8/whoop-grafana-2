/*
 * WHOOP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Whoop.Sdk.Client.OpenAPIDateConverter;

namespace Whoop.Sdk.Model
{
    /// <summary>
    /// UserBodyMeasurement
    /// </summary>
    [DataContract(Name = "UserBodyMeasurement")]
    public partial class UserBodyMeasurement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserBodyMeasurement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserBodyMeasurement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserBodyMeasurement" /> class.
        /// </summary>
        /// <param name="heightMeter">User&#39;s height in meters (required).</param>
        /// <param name="weightKilogram">User&#39;s weight in kilograms (required).</param>
        /// <param name="maxHeartRate">The max heart rate WHOOP calculated for the user (required).</param>
        public UserBodyMeasurement(float heightMeter = default(float), float weightKilogram = default(float), int maxHeartRate = default(int))
        {
            this.HeightMeter = heightMeter;
            this.WeightKilogram = weightKilogram;
            this.MaxHeartRate = maxHeartRate;
        }

        /// <summary>
        /// User&#39;s height in meters
        /// </summary>
        /// <value>User&#39;s height in meters</value>
        /// <example>1.8288</example>
        [DataMember(Name = "height_meter", IsRequired = true, EmitDefaultValue = true)]
        public float HeightMeter { get; set; }

        /// <summary>
        /// User&#39;s weight in kilograms
        /// </summary>
        /// <value>User&#39;s weight in kilograms</value>
        /// <example>90.7185</example>
        [DataMember(Name = "weight_kilogram", IsRequired = true, EmitDefaultValue = true)]
        public float WeightKilogram { get; set; }

        /// <summary>
        /// The max heart rate WHOOP calculated for the user
        /// </summary>
        /// <value>The max heart rate WHOOP calculated for the user</value>
        /// <example>200</example>
        [DataMember(Name = "max_heart_rate", IsRequired = true, EmitDefaultValue = true)]
        public int MaxHeartRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserBodyMeasurement {\n");
            sb.Append("  HeightMeter: ").Append(HeightMeter).Append("\n");
            sb.Append("  WeightKilogram: ").Append(WeightKilogram).Append("\n");
            sb.Append("  MaxHeartRate: ").Append(MaxHeartRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
