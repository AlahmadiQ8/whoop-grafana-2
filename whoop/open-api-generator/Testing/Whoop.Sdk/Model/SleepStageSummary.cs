/*
 * WHOOP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Whoop.Sdk.Client.OpenAPIDateConverter;

namespace Whoop.Sdk.Model
{
    /// <summary>
    /// Summary of the sleep stages
    /// </summary>
    [DataContract(Name = "SleepStageSummary")]
    public partial class SleepStageSummary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SleepStageSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SleepStageSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SleepStageSummary" /> class.
        /// </summary>
        /// <param name="totalInBedTimeMilli">Total time the user spent in bed, in milliseconds (required).</param>
        /// <param name="totalAwakeTimeMilli">Total time the user spent awake, in milliseconds (required).</param>
        /// <param name="totalNoDataTimeMilli">Total time WHOOP did not receive data from the user during the sleep, in milliseconds (required).</param>
        /// <param name="totalLightSleepTimeMilli">Total time the user spent in light sleep, in milliseconds (required).</param>
        /// <param name="totalSlowWaveSleepTimeMilli">Total time the user spent in Slow Wave Sleep (SWS), in milliseconds (required).</param>
        /// <param name="totalRemSleepTimeMilli">Total time the user spent in Rapid Eye Movement (REM) sleep, in milliseconds (required).</param>
        /// <param name="sleepCycleCount">Number of sleep cycles during the user&#39;s sleep (required).</param>
        /// <param name="disturbanceCount">Number of times the user was disturbed during sleep (required).</param>
        public SleepStageSummary(int totalInBedTimeMilli = default(int), int totalAwakeTimeMilli = default(int), int totalNoDataTimeMilli = default(int), int totalLightSleepTimeMilli = default(int), int totalSlowWaveSleepTimeMilli = default(int), int totalRemSleepTimeMilli = default(int), int sleepCycleCount = default(int), int disturbanceCount = default(int))
        {
            this.TotalInBedTimeMilli = totalInBedTimeMilli;
            this.TotalAwakeTimeMilli = totalAwakeTimeMilli;
            this.TotalNoDataTimeMilli = totalNoDataTimeMilli;
            this.TotalLightSleepTimeMilli = totalLightSleepTimeMilli;
            this.TotalSlowWaveSleepTimeMilli = totalSlowWaveSleepTimeMilli;
            this.TotalRemSleepTimeMilli = totalRemSleepTimeMilli;
            this.SleepCycleCount = sleepCycleCount;
            this.DisturbanceCount = disturbanceCount;
        }

        /// <summary>
        /// Total time the user spent in bed, in milliseconds
        /// </summary>
        /// <value>Total time the user spent in bed, in milliseconds</value>
        /// <example>30272735</example>
        [DataMember(Name = "total_in_bed_time_milli", IsRequired = true, EmitDefaultValue = true)]
        public int TotalInBedTimeMilli { get; set; }

        /// <summary>
        /// Total time the user spent awake, in milliseconds
        /// </summary>
        /// <value>Total time the user spent awake, in milliseconds</value>
        /// <example>1403507</example>
        [DataMember(Name = "total_awake_time_milli", IsRequired = true, EmitDefaultValue = true)]
        public int TotalAwakeTimeMilli { get; set; }

        /// <summary>
        /// Total time WHOOP did not receive data from the user during the sleep, in milliseconds
        /// </summary>
        /// <value>Total time WHOOP did not receive data from the user during the sleep, in milliseconds</value>
        /// <example>0</example>
        [DataMember(Name = "total_no_data_time_milli", IsRequired = true, EmitDefaultValue = true)]
        public int TotalNoDataTimeMilli { get; set; }

        /// <summary>
        /// Total time the user spent in light sleep, in milliseconds
        /// </summary>
        /// <value>Total time the user spent in light sleep, in milliseconds</value>
        /// <example>14905851</example>
        [DataMember(Name = "total_light_sleep_time_milli", IsRequired = true, EmitDefaultValue = true)]
        public int TotalLightSleepTimeMilli { get; set; }

        /// <summary>
        /// Total time the user spent in Slow Wave Sleep (SWS), in milliseconds
        /// </summary>
        /// <value>Total time the user spent in Slow Wave Sleep (SWS), in milliseconds</value>
        /// <example>6630370</example>
        [DataMember(Name = "total_slow_wave_sleep_time_milli", IsRequired = true, EmitDefaultValue = true)]
        public int TotalSlowWaveSleepTimeMilli { get; set; }

        /// <summary>
        /// Total time the user spent in Rapid Eye Movement (REM) sleep, in milliseconds
        /// </summary>
        /// <value>Total time the user spent in Rapid Eye Movement (REM) sleep, in milliseconds</value>
        /// <example>5879573</example>
        [DataMember(Name = "total_rem_sleep_time_milli", IsRequired = true, EmitDefaultValue = true)]
        public int TotalRemSleepTimeMilli { get; set; }

        /// <summary>
        /// Number of sleep cycles during the user&#39;s sleep
        /// </summary>
        /// <value>Number of sleep cycles during the user&#39;s sleep</value>
        /// <example>3</example>
        [DataMember(Name = "sleep_cycle_count", IsRequired = true, EmitDefaultValue = true)]
        public int SleepCycleCount { get; set; }

        /// <summary>
        /// Number of times the user was disturbed during sleep
        /// </summary>
        /// <value>Number of times the user was disturbed during sleep</value>
        /// <example>12</example>
        [DataMember(Name = "disturbance_count", IsRequired = true, EmitDefaultValue = true)]
        public int DisturbanceCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SleepStageSummary {\n");
            sb.Append("  TotalInBedTimeMilli: ").Append(TotalInBedTimeMilli).Append("\n");
            sb.Append("  TotalAwakeTimeMilli: ").Append(TotalAwakeTimeMilli).Append("\n");
            sb.Append("  TotalNoDataTimeMilli: ").Append(TotalNoDataTimeMilli).Append("\n");
            sb.Append("  TotalLightSleepTimeMilli: ").Append(TotalLightSleepTimeMilli).Append("\n");
            sb.Append("  TotalSlowWaveSleepTimeMilli: ").Append(TotalSlowWaveSleepTimeMilli).Append("\n");
            sb.Append("  TotalRemSleepTimeMilli: ").Append(TotalRemSleepTimeMilli).Append("\n");
            sb.Append("  SleepCycleCount: ").Append(SleepCycleCount).Append("\n");
            sb.Append("  DisturbanceCount: ").Append(DisturbanceCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
