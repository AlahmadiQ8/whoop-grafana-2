/*
 * WHOOP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Whoop.Sdk.Client.OpenAPIDateConverter;

namespace Whoop.Sdk.Model
{
    /// <summary>
    /// Recovery
    /// </summary>
    [DataContract(Name = "Recovery")]
    public partial class Recovery : IValidatableObject
    {
        /// <summary>
        /// &#x60;SCORED&#x60; means the recovery was scored and the measurement values will be present. &#x60;PENDING_SCORE&#x60; means WHOOP is currently evaluating the cycle. &#x60;UNSCORABLE&#x60; means this activity could not be scored for some reason - commonly because there is not enough user metric data for the time range.
        /// </summary>
        /// <value>&#x60;SCORED&#x60; means the recovery was scored and the measurement values will be present. &#x60;PENDING_SCORE&#x60; means WHOOP is currently evaluating the cycle. &#x60;UNSCORABLE&#x60; means this activity could not be scored for some reason - commonly because there is not enough user metric data for the time range.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScoreStateEnum
        {
            /// <summary>
            /// Enum SCORED for value: SCORED
            /// </summary>
            [EnumMember(Value = "SCORED")]
            SCORED = 1,

            /// <summary>
            /// Enum PENDINGSCORE for value: PENDING_SCORE
            /// </summary>
            [EnumMember(Value = "PENDING_SCORE")]
            PENDINGSCORE = 2,

            /// <summary>
            /// Enum UNSCORABLE for value: UNSCORABLE
            /// </summary>
            [EnumMember(Value = "UNSCORABLE")]
            UNSCORABLE = 3
        }


        /// <summary>
        /// &#x60;SCORED&#x60; means the recovery was scored and the measurement values will be present. &#x60;PENDING_SCORE&#x60; means WHOOP is currently evaluating the cycle. &#x60;UNSCORABLE&#x60; means this activity could not be scored for some reason - commonly because there is not enough user metric data for the time range.
        /// </summary>
        /// <value>&#x60;SCORED&#x60; means the recovery was scored and the measurement values will be present. &#x60;PENDING_SCORE&#x60; means WHOOP is currently evaluating the cycle. &#x60;UNSCORABLE&#x60; means this activity could not be scored for some reason - commonly because there is not enough user metric data for the time range.</value>
        /// <example>SCORED</example>
        [DataMember(Name = "score_state", IsRequired = true, EmitDefaultValue = true)]
        public ScoreStateEnum ScoreState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Recovery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Recovery() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Recovery" /> class.
        /// </summary>
        /// <param name="cycleId">The Recovery represents how recovered the user is for this physiological cycle (required).</param>
        /// <param name="sleepId">ID of the Sleep associated with the Recovery (required).</param>
        /// <param name="userId">The WHOOP User for the recovery (required).</param>
        /// <param name="createdAt">The time the recovery was recorded in WHOOP (required).</param>
        /// <param name="updatedAt">The time the recovery was last updated in WHOOP (required).</param>
        /// <param name="scoreState">&#x60;SCORED&#x60; means the recovery was scored and the measurement values will be present. &#x60;PENDING_SCORE&#x60; means WHOOP is currently evaluating the cycle. &#x60;UNSCORABLE&#x60; means this activity could not be scored for some reason - commonly because there is not enough user metric data for the time range. (required).</param>
        /// <param name="score">score.</param>
        public Recovery(long cycleId = default(long), long sleepId = default(long), long userId = default(long), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), ScoreStateEnum scoreState = default(ScoreStateEnum), RecoveryScore score = default(RecoveryScore))
        {
            this.CycleId = cycleId;
            this.SleepId = sleepId;
            this.UserId = userId;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.ScoreState = scoreState;
            this.Score = score;
        }

        /// <summary>
        /// The Recovery represents how recovered the user is for this physiological cycle
        /// </summary>
        /// <value>The Recovery represents how recovered the user is for this physiological cycle</value>
        /// <example>93845</example>
        [DataMember(Name = "cycle_id", IsRequired = true, EmitDefaultValue = true)]
        public long CycleId { get; set; }

        /// <summary>
        /// ID of the Sleep associated with the Recovery
        /// </summary>
        /// <value>ID of the Sleep associated with the Recovery</value>
        /// <example>10235</example>
        [DataMember(Name = "sleep_id", IsRequired = true, EmitDefaultValue = true)]
        public long SleepId { get; set; }

        /// <summary>
        /// The WHOOP User for the recovery
        /// </summary>
        /// <value>The WHOOP User for the recovery</value>
        /// <example>10129</example>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = true)]
        public long UserId { get; set; }

        /// <summary>
        /// The time the recovery was recorded in WHOOP
        /// </summary>
        /// <value>The time the recovery was recorded in WHOOP</value>
        /// <example>2022-04-24T11:25:44.774Z</example>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The time the recovery was last updated in WHOOP
        /// </summary>
        /// <value>The time the recovery was last updated in WHOOP</value>
        /// <example>2022-04-24T14:25:44.774Z</example>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public RecoveryScore Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Recovery {\n");
            sb.Append("  CycleId: ").Append(CycleId).Append("\n");
            sb.Append("  SleepId: ").Append(SleepId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ScoreState: ").Append(ScoreState).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
