/*
 * WHOOP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Whoop.Sdk.Client.OpenAPIDateConverter;

namespace Whoop.Sdk.Model
{
    /// <summary>
    /// WHOOP&#39;s measurements and evaluation of the workout activity. Only present if the Workout State is &#x60;SCORED&#x60;
    /// </summary>
    [DataContract(Name = "WorkoutScore")]
    public partial class WorkoutScore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkoutScore" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkoutScore() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkoutScore" /> class.
        /// </summary>
        /// <param name="strain">WHOOP metric of the cardiovascular load - the level of strain the workout had on the user&#39;s cardiovascular system based on the user&#39;s heart rate. Strain is scored on a scale from 0 to 21. (required).</param>
        /// <param name="averageHeartRate">The user&#39;s average heart rate (beats per minute) during the workout. (required).</param>
        /// <param name="maxHeartRate">The user&#39;s max heart rate (beats per minute) during the workout. (required).</param>
        /// <param name="kilojoule">Kilojoules the user expended during the workout. (required).</param>
        /// <param name="percentRecorded">Percentage (0-100%) of heart rate data WHOOP received during the workout. (required).</param>
        /// <param name="distanceMeter">The distance the user travelled during the workout. Only present if distance data sent to WHOOP.</param>
        /// <param name="altitudeGainMeter">The altitude gained during the workout. This measurement does not account for downward travel - it is strictly a measure of altitude climbed. If a member climbed up and down a 1,000 meter mountain, ending at the same altitude, this measurement would be 1,000 meters. Only present if altitude data is included as part of the workout.</param>
        /// <param name="altitudeChangeMeter">The altitude difference between the start and end points of the workout. If a member climbed up and down a mountain, ending at the same altitude, this measurement would be 0. Only present if altitude data is included as part of the workout.</param>
        /// <param name="zoneDuration">zoneDuration (required).</param>
        public WorkoutScore(float strain = default(float), int averageHeartRate = default(int), int maxHeartRate = default(int), float kilojoule = default(float), float percentRecorded = default(float), float distanceMeter = default(float), float altitudeGainMeter = default(float), float altitudeChangeMeter = default(float), ZoneDuration zoneDuration = default(ZoneDuration))
        {
            this.Strain = strain;
            this.AverageHeartRate = averageHeartRate;
            this.MaxHeartRate = maxHeartRate;
            this.Kilojoule = kilojoule;
            this.PercentRecorded = percentRecorded;
            // to ensure "zoneDuration" is required (not null)
            if (zoneDuration == null)
            {
                throw new ArgumentNullException("zoneDuration is a required property for WorkoutScore and cannot be null");
            }
            this.ZoneDuration = zoneDuration;
            this.DistanceMeter = distanceMeter;
            this.AltitudeGainMeter = altitudeGainMeter;
            this.AltitudeChangeMeter = altitudeChangeMeter;
        }

        /// <summary>
        /// WHOOP metric of the cardiovascular load - the level of strain the workout had on the user&#39;s cardiovascular system based on the user&#39;s heart rate. Strain is scored on a scale from 0 to 21.
        /// </summary>
        /// <value>WHOOP metric of the cardiovascular load - the level of strain the workout had on the user&#39;s cardiovascular system based on the user&#39;s heart rate. Strain is scored on a scale from 0 to 21.</value>
        /// <example>8.2463</example>
        [DataMember(Name = "strain", IsRequired = true, EmitDefaultValue = true)]
        public float Strain { get; set; }

        /// <summary>
        /// The user&#39;s average heart rate (beats per minute) during the workout.
        /// </summary>
        /// <value>The user&#39;s average heart rate (beats per minute) during the workout.</value>
        /// <example>123</example>
        [DataMember(Name = "average_heart_rate", IsRequired = true, EmitDefaultValue = true)]
        public int AverageHeartRate { get; set; }

        /// <summary>
        /// The user&#39;s max heart rate (beats per minute) during the workout.
        /// </summary>
        /// <value>The user&#39;s max heart rate (beats per minute) during the workout.</value>
        /// <example>146</example>
        [DataMember(Name = "max_heart_rate", IsRequired = true, EmitDefaultValue = true)]
        public int MaxHeartRate { get; set; }

        /// <summary>
        /// Kilojoules the user expended during the workout.
        /// </summary>
        /// <value>Kilojoules the user expended during the workout.</value>
        /// <example>1569.34033203125</example>
        [DataMember(Name = "kilojoule", IsRequired = true, EmitDefaultValue = true)]
        public float Kilojoule { get; set; }

        /// <summary>
        /// Percentage (0-100%) of heart rate data WHOOP received during the workout.
        /// </summary>
        /// <value>Percentage (0-100%) of heart rate data WHOOP received during the workout.</value>
        /// <example>100</example>
        [DataMember(Name = "percent_recorded", IsRequired = true, EmitDefaultValue = true)]
        public float PercentRecorded { get; set; }

        /// <summary>
        /// The distance the user travelled during the workout. Only present if distance data sent to WHOOP
        /// </summary>
        /// <value>The distance the user travelled during the workout. Only present if distance data sent to WHOOP</value>
        /// <example>1772.77035916</example>
        [DataMember(Name = "distance_meter", EmitDefaultValue = false)]
        public float DistanceMeter { get; set; }

        /// <summary>
        /// The altitude gained during the workout. This measurement does not account for downward travel - it is strictly a measure of altitude climbed. If a member climbed up and down a 1,000 meter mountain, ending at the same altitude, this measurement would be 1,000 meters. Only present if altitude data is included as part of the workout
        /// </summary>
        /// <value>The altitude gained during the workout. This measurement does not account for downward travel - it is strictly a measure of altitude climbed. If a member climbed up and down a 1,000 meter mountain, ending at the same altitude, this measurement would be 1,000 meters. Only present if altitude data is included as part of the workout</value>
        /// <example>46.64384460449</example>
        [DataMember(Name = "altitude_gain_meter", EmitDefaultValue = false)]
        public float AltitudeGainMeter { get; set; }

        /// <summary>
        /// The altitude difference between the start and end points of the workout. If a member climbed up and down a mountain, ending at the same altitude, this measurement would be 0. Only present if altitude data is included as part of the workout
        /// </summary>
        /// <value>The altitude difference between the start and end points of the workout. If a member climbed up and down a mountain, ending at the same altitude, this measurement would be 0. Only present if altitude data is included as part of the workout</value>
        /// <example>-0.781372010707855</example>
        [DataMember(Name = "altitude_change_meter", EmitDefaultValue = false)]
        public float AltitudeChangeMeter { get; set; }

        /// <summary>
        /// Gets or Sets ZoneDuration
        /// </summary>
        [DataMember(Name = "zone_duration", IsRequired = true, EmitDefaultValue = true)]
        public ZoneDuration ZoneDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkoutScore {\n");
            sb.Append("  Strain: ").Append(Strain).Append("\n");
            sb.Append("  AverageHeartRate: ").Append(AverageHeartRate).Append("\n");
            sb.Append("  MaxHeartRate: ").Append(MaxHeartRate).Append("\n");
            sb.Append("  Kilojoule: ").Append(Kilojoule).Append("\n");
            sb.Append("  PercentRecorded: ").Append(PercentRecorded).Append("\n");
            sb.Append("  DistanceMeter: ").Append(DistanceMeter).Append("\n");
            sb.Append("  AltitudeGainMeter: ").Append(AltitudeGainMeter).Append("\n");
            sb.Append("  AltitudeChangeMeter: ").Append(AltitudeChangeMeter).Append("\n");
            sb.Append("  ZoneDuration: ").Append(ZoneDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
