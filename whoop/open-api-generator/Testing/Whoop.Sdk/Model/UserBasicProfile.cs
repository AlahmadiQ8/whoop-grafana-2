/*
 * WHOOP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Whoop.Sdk.Client.OpenAPIDateConverter;

namespace Whoop.Sdk.Model
{
    /// <summary>
    /// UserBasicProfile
    /// </summary>
    [DataContract(Name = "UserBasicProfile")]
    public partial class UserBasicProfile : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserBasicProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserBasicProfile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserBasicProfile" /> class.
        /// </summary>
        /// <param name="userId">The WHOOP User (required).</param>
        /// <param name="email">User&#39;s Email (required).</param>
        /// <param name="firstName">User&#39;s First Name (required).</param>
        /// <param name="lastName">User&#39;s Last Name (required).</param>
        public UserBasicProfile(long userId = default(long), string email = default(string), string firstName = default(string), string lastName = default(string))
        {
            this.UserId = userId;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for UserBasicProfile and cannot be null");
            }
            this.Email = email;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for UserBasicProfile and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for UserBasicProfile and cannot be null");
            }
            this.LastName = lastName;
        }

        /// <summary>
        /// The WHOOP User
        /// </summary>
        /// <value>The WHOOP User</value>
        /// <example>10129</example>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = true)]
        public long UserId { get; set; }

        /// <summary>
        /// User&#39;s Email
        /// </summary>
        /// <value>User&#39;s Email</value>
        /// <example>jsmith123@whoop.com</example>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// User&#39;s First Name
        /// </summary>
        /// <value>User&#39;s First Name</value>
        /// <example>John</example>
        [DataMember(Name = "first_name", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// User&#39;s Last Name
        /// </summary>
        /// <value>User&#39;s Last Name</value>
        /// <example>Smith</example>
        [DataMember(Name = "last_name", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserBasicProfile {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
